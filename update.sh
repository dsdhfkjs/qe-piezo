#!/bin/bash

#Update scripts found in Research/*/ and Research/Archive/*/
#If you want to replace '/' '\' '(' ')' '[' ']' '{' '}' remember to type a '\' preceding the characters
#For inputting an apostrophe, use '\''

#Deletion of part of script in between and including REGEX1 and REGEX2
#sed -i '/REGEX1/,/REGEX2/d' ./*/*.sh Archive/*/*.sh #./AlAgTe2/*.sh

#Change REGEX to NEWLINE
#sed -i '/REGEX/c\NEWLINE' ./*/*.sh Archive/*/*.sh #./AlAgTe2/*.sh

#Add NEWLINE after REGEX
#sed -i 's/REGEX.*$/&\nNEWLINE/' ./*/*.sh Archive/*/*.sh #./AlAgTe2/*.sh


sed -i '/   compile="6.0-smart-phase"/c\   compile="6.0-smart"' ./*/*.sh Archive/*/*.sh 
sed -i '/   cd ..\/6.0-smart\//,/   compile="6.0-smart"/d' ./*/*.sh Archive/*/*.sh #kasi compile="6.0-smart-phase" sila!

sed -i 's/elif \[ $loop = 61 \]; then.*$/&\n   cd ..\/6.0-smart\/\n   compile="6.0-smart"/' ./*/*.sh Archive/*/*.sh 
sed -i 's/elif \[ $loop = 611 \]; then.*$/&\n   cd ..\/6.0-smart\/\n   compile="6.0-smart-phase"/' ./*/*.sh Archive/*/*.sh 
sed -i 's/elif \[ $loop = 618 \]; then.*$/&\n   cd ..\/6.0-smart\/\n   compile="6.0-smart-phase"/' ./*/*.sh Archive/*/*.sh 
sed -i 's/elif \[ $loop = 619 \]; then.*$/&\n   cd ..\/6.0-smart\/\n   compile="6.0-smart-phase"/' ./*/*.sh Archive/*/*.sh 

#sed -i '/cat > $filename.phasevsstrain.py << EOF/,/plt.legend(frameon=False, loc='\''best'\'', fontsize=legendsize)/d' ./*/*.sh Archive/*/*.sh 

#sed -i 's/#Plotting the total Berry phase across different directions.*$/&\ncat > $filename.phasevsstrain.py << EOF\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.stats as sc\nimport scipy.constants as consts\n\nprint "\\nPlotting total Berry phase vs. strain and the proper piezoelectric tensor."\n\nfilename='\''$plotsave$filename'\''\nplotrange='\''$compile.$plotrange'\''\noutput='\''$output'\''\npolarlen=$polarlen\nstrainlen=$strainlen\ncrysdirlen=3\npolardir=$polardir_plot\nstraindir=$straindir_plot\npiezodirplot=$piezodir_plot\nR = np.array\(\[\[$a1_i, $a2_i, $a3_i\], \[$b1_i, $b2_i, $b3_i\], \[$c1_i, $c2_i, $c3_i\]\], float\)*$BohrtoAng*$alat\/\(1e10\)\n#dphi_deps = np.zeros\(\(3, 6\), float\)\nc_tilde = np.zeros\(\(3, 6\), float\) #c = np.empty\(\(polarlen, strainlen\), float\)\npoint_grp='\''$point_grp'\''\nvolume=$volume_i\n\n#Plot settings\nwidth=2\nmarker=16\nlegendsize=24\nlineplot = \["b--", "r--", "g--", "c--", "y--", "m--"\]\nmarkerplot = \["bD", "rs", "go", "c^", "yv", "m+"\]\ncolorplot = \["blue", "red", "green", "cyan", "yellow", "magenta"\]\nplotarr = \[\[\[\] for j in xrange\(strainlen\)\] for i in xrange\(polarlen\)\]\nfor k in xrange\(len\(piezodirplot\)\):\n\tplotarr\[polardir.index\(piezodirplot\[k\]\[0\]\)\]\[straindir.index\(piezodirplot\[k\]\[1\]\)\] = \[lineplot\[k\], markerplot\[k\], colorplot\[k\]\]\n\nxData0 = np.array\($strain_plot, float\)\nxData = xData0\n#xData = 0.5*xData0**2 + xData0\nyData = np.array\($\{phase_plot\[@\]\}, float\) #yData\[straindir\]\[polardir\]\n\nf=open\(output, '\''a'\''\)\nf.write\("\\n\\nP: %s\\n\\n" % xData\)\nfor i in xrange\(polarlen\):\n\tfor j in xrange\(strainlen\):\n\t\tf.write\("Berry Phase %s - Strain %s: %s\\n" % \(polardir\[i\], straindir\[j\], yData\[j\]\[i\]\)\)\nf.close\n\n\nxmin, xmax = min\(xData\), max\(xData\)\nymin, ymax = yData\[0\]\[0\]\[0\], yData\[0\]\[0\]\[0\]\nfor i in xrange\(polarlen\):\n\tfor j in xrange\(strainlen\):\n\t\tif \(polardir\[i\], straindir\[j\]\) in piezodirplot:\n\t\t\tymin, ymax = min\(ymin, min\(yData\[j\]\[i\]\)\), max\(ymax, max\(yData\[j\]\[i\]\)\)\nxpad = \(xmax-xmin\)\/5.0\nypad = \(ymax-ymin\)\/5.0\nplt.figure\(num=1, figsize=\(14, 9\)\)\n\nf=open\(output, '\''a'\''\)\nfor i in xrange\(polarlen\):\n\tfor j in xrange\(strainlen\):\n\t\tfor alpha in xrange\(crysdirlen\):\n\t\t\tm, b, r, pvalue, stderr = sc.linregress\(xData, yData\[j\]\[i\]\)\n\t\t\tx_left, x_right = xmin, xmax\n\t\t\ty_left, y_right = m*x_left+b, m*x_right+b\n\t\t\teq = '\''$ y\\ =\\ %.10fx + %.10f$\\n$ R^2\\ =\\ %.10f$'\'' % \(m, b, r**2\)\n\t\t\tprint "phase %s - strain %s: %s" % \(polardir\[i\], straindir\[j\], eq\)\n\t\t\tf.write\("\\nphase %s - strain %s: %s" % \(polardir\[i\], straindir\[j\], eq\)\)\n\t\t\tif \(polardir\[i\], straindir\[j\]\) in piezodirplot:\n\t\t\t\tplt.plot\(\[x_left, x_right\], \[y_left, y_right\], plotarr\[i\]\[j\]\[0\], linewidth=width\)#, label=eq\)\n\t\t\t\tplt.plot\(xData, yData\[j\]\[i\], plotarr\[i\]\[j\]\[1\], label='\''$ \\phi\\mathrm\{_%s\\ by\\ \}E\\mathrm\{_%s\\ only\}$'\''%\(polardir\[i\], straindir\[j\]\), markersize=marker, markeredgecolor=plotarr\[i\]\[j\]\[2\], linewidth=5\)\n\t\t\tprint "dphi\/deps: %s\\tR\[alpha\]\[i\]: %s" % \(m, R\[alpha\]\[polardir\[i\]-1\]\)\n\t\t\tc_tilde\[polardir\[i\]-1\]\[straindir\[j\]-1\] += m*R\[alpha\]\[polardir\[i\]-1\]\nf.close\n\nc_tilde *= consts.e\/\(2*consts.pi*\(volume\/\(1e10\)**3\)\)\n\nprint "\\nc_tilde \(C\/m^2\) before applying symmetry.\\n%s" % np.array_str\(c_tilde, precision=1, suppress_small=True\)\n\n#Applying symmetry to the piezoelectric tensor\n\nif point_grp in \['\''23'\'', '\''-43m'\'', '\''-42m'\'', '\''-4'\'', '\''-6m2'\'', '\''-6'\'', '\''6mm'\'', '\''4mm'\'', '\''6'\'', '\''4'\'', '\''422'\'', '\''622'\'', '\''3m'\'', '\''32'\'', '\''3'\''\]:\n\tif point_grp in \['\''23'\'', '\''-43m'\'', '\''-42m'\'', '\''-4'\''\]:\n\t\tc_tilde\[1\]\[4\] = c_tilde\[0\]\[3\]\n\t\t\n\t\tif point_grp in \['\''23'\'', '\''-43m'\''\]:\n\t\t\tc_tilde\[2\]\[5\] = c_tilde\[0\]\[3\]\n\t\t\t\n\t\telif point_grp == "-4":\n\t\t\tc_tilde\[0\]\[4\] = -c_tilde\[1\]\[3\]\n\t\t\tc_tilde\[2\]\[1\] = -c_tilde\[2\]\[0\]\n\t\t\t\n\telse:\n\t\tif point_grp in \['\''-6m2'\'', '\''-6'\'', '\''3m'\'', '\''3'\''\]:\n\t\t\tc_tilde\[1\]\[1\], c_tilde\[0\]\[5\] = -c_tilde\[1\]\[0\], c_tilde\[1\]\[0\]\n\t\t\t\n\t\tif point_grp in \['\''-6'\'', '\''32'\'', '\''3'\''\]:\n\t\t\tc_tilde\[0\]\[1\], c_tilde\[1\]\[5\] = -c_tilde\[0\]\[0\], -c_tilde\[0\]\[0\]\n\t\t\t\n\t\tif point_grp in \['\''6'\'', '\''4'\'', '\''622'\'', '\''422'\'', '\''32'\'', '\''3'\''\]:\n\t\t\tc_tilde\[1\]\[4\] = -c_tilde\[0\]\[3\]\n\t\t\t\n\t\tif point_grp in \['\''6mm'\'', '\''4mm'\'', '\''6'\'', '\''4'\'', '\''3m'\'', '\''3'\''\]:\n\t\t\tc_tilde\[2\]\[1\] = c_tilde\[2\]\[0\]\n\t\t\t\n\t\t\tif point_grp == '\''3'\'':\n\t\t\t\tc_tilde\[0\]\[4\] = -c_tilde\[1\]\[3\]\n\t\t\t\t\n\t\t\telse:\n\t\t\t\tc_tilde\[0\]\[4\] = c_tilde\[1\]\[3\]\n\nprint "\\nc_tilde \(C\/m^2\) after applying symmetry.\\n%s" % np.array_str\(c_tilde, precision=1, suppress_small=True\)\nf=open\(output, '\''a'\''\)\nf.write\("\\n\\nc_tilde \(C\/m^2\)\\n%s\\n\\n" % np.array_str\(c_tilde, precision=5, suppress_small=True\)\)\nf.close\n\n\nplt.legend\(frameon=False, loc='\''best'\'', fontsize=legendsize\)/' ./*/*.sh Archive/*/*.sh 



